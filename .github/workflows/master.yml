name: Compile and test C++ package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILD_TYPE: Debug

jobs:
  build-linux:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.9]
        dot-net-version: [6.0.100-preview.3.21202.5]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Install CLR requirements
        run: |
          sudo apt-get -y update
          sudo apt-get install -y cmake llvm-9 clang-9 autoconf automake \
          libtool build-essential python curl git lldb-6.0 liblldb-6.0-dev \
          libunwind8 libunwind8-dev gettext libicu-dev liblttng-ust-dev \
          libssl-dev libnuma-dev libkrb5-dev zlib1g-dev
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dot-net-version }}

      - name: Create Build Environment
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --build . --config $BUILD_TYPE

      - name: Build Python Package
        shell: bash
        run: python -m pip install --upgrade pip && pip install .

      - name: Run unit tests
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: ./unit_tests

      - name: Run Python tests
        shell: bash
        run: |
          pip install -r Tests/requirements_test.txt
          python -m unittest discover Tests/

      - name: Run smoke tests
        shell: bash
        run: |
          python -X dev -q Tests/run_smoke_tests.py -f Tests/python_smoke_tests.txt -o 0
          python -X dev -q Tests/run_smoke_tests.py -f Tests/python_smoke_tests.txt -o 1
          python -X dev -q Tests/run_smoke_tests.py -f Tests/python_smoke_tests.txt -o 1 --pgc
          python -X dev -q Tests/run_smoke_tests.py -f Tests/python_smoke_tests.txt -o 2
        continue-on-error: true

      - name: Run full test suite
        shell: bash
        run: python -X dev -q Tests/run_libregr_tests.py -f Tests/python_tests.txt -v
        continue-on-error: true
        timeout-minutes: 30

      - name: Test IPython REPL
        shell: bash
        run: |
          pip install ipython
          python -X dev -m IPython -c="import pyjion;pyjion.enable();a=1+1;a"

      - name: Install scikit-build for wheel
        shell: bash
        run: |
          python -m pip install -U https://github.com/tonybaloney/scikit-build/archive/vs2019.zip

      - name: Build Linux Docker image
        run: docker build -t pyjion -f Dockerfile.manylinux .

      - name: Build manylinux wheel
        run: |
          docker run \
            --rm \
            -v "$(pwd):/github/workspace" pyjion

      - uses: actions/upload-artifact@v1
        with:
          name: dist
          path: dist

  build-macos-11:
    runs-on: macos-11.0
    strategy:
      matrix:
        python-version: [3.9]
        dot-net-version: [ 6.0.100-preview.3.21202.5 ]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dot-net-version }}
      - name: Create Build Environment
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCODE_COVERAGE=ON

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --build . --config $BUILD_TYPE

      - name: Build Python Package
        shell: bash
        run: python -m pip install --upgrade pip && pip install .

      - name: Run unit tests
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: ./unit_tests
        
      - name: Run gcov
        shell: bash
        run: gcov Tests/

      - name: Codecov
        uses: codecov/codecov-action@v1.0.15
        with:
          directory: Tests/

      - name: Run Python tests
        shell: bash
        run: |
          pip install -r Tests/requirements_test.txt
          python -m unittest discover Tests/

      - name: Run smoke tests
        shell: bash
        run: |
          python -X dev -q Tests/run_smoke_tests.py -f Tests/python_smoke_tests.txt -o 0
          python -X dev -q Tests/run_smoke_tests.py -f Tests/python_smoke_tests.txt -o 1
          python -X dev -q Tests/run_smoke_tests.py -f Tests/python_smoke_tests.txt -o 1 --pgc
          python -X dev -q Tests/run_smoke_tests.py -f Tests/python_smoke_tests.txt -o 2
        continue-on-error: true

      - name: Run full test suite
        shell: bash
        run: python -X dev -q Tests/run_libregr_tests.py -f Tests/python_tests_macos11.txt -v
        continue-on-error: true
        timeout-minutes: 30

      - name: Test IPython REPL
        shell: bash
        run: |
          pip install ipython
          python -X dev -m IPython -c="import pyjion;pyjion.enable();a=1+1;a"

      - name: Build Python Wheel
        shell: bash
        run: |
          python -m pip install -U https://github.com/tonybaloney/scikit-build/archive/vs2019.zip
          python setup.py bdist_wheel

      - uses: actions/upload-artifact@v1
        with:
          name: dist
          path: dist

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.9]
        dot-net-version: [ 6.0.100-preview.3.21202.5 ]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dot-net-version }}

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Create Build Environment
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --build . --config Release

      - name: Install build deps
        shell: bash
        run: python -m pip install -U https://github.com/tonybaloney/scikit-build/archive/vs2019.zip

      - name: Build Python Package
        shell: bash
        run: python setup.py build --generator "Visual Studio 16 2019"

      - name: Install Python Package
        shell: bash
        run: python setup.py install --generator "Visual Studio 16 2019"

      - name: Build Python Wheel
        shell: bash
        run: |
          python setup.py bdist_wheel --generator "Visual Studio 16 2019"
          WHEEL=$(find ./dist -name "*.whl" -printf "%p")
          echo "WHEEL=$WHEEL" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v1
        with:
          name: dist
          path: ${{ env.WHEEL }}

      - name: Run unit tests
        working-directory: ${{runner.workspace}}/build/Release
        run: |
          cp c:\Users\runneradmin\AppData\Local\Microsoft\dotnet\shared\Microsoft.NETCore.App\6.0.0-preview.3.21201.4\clrjit.dll .
          .\unit_tests.exe

      - name: Run Python tests
        shell: bash
        run: |
          pip install -r Tests/requirements_test.txt
          python -m unittest discover Tests/

      - name: Run smoke tests
        shell: bash
        run: |
          python -X dev -q Tests/run_smoke_tests.py -f Tests/python_smoke_tests.txt -o 0
          python -X dev -q Tests/run_smoke_tests.py -f Tests/python_smoke_tests.txt -o 1
          python -X dev -q Tests/run_smoke_tests.py -f Tests/python_smoke_tests.txt -o 1 --pgc
          python -X dev -q Tests/run_smoke_tests.py -f Tests/python_smoke_tests.txt -o 2
        continue-on-error: true

      - name: Run full test suite
        shell: bash
        run: python -X dev -q Tests/run_libregr_tests.py -f Tests/python_tests_win.txt -v
        continue-on-error: true
        timeout-minutes: 30

      - name: Test IPython REPL
        shell: bash
        run: |
          pip install ipython
          python -X dev -m IPython -c="import pyjion;pyjion.enable();a=1+1;a"
